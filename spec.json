{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Region API",
    "description": "API for interacting with the Oxide control plane",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1",
    "x-go": {
      "client": "// Create a client with your token and host.\nclient, err := oxide.NewClient(\"$OXIDE_TOKEN\", \"your apps user agent\", \"$OXIDE_HOST\")\nif err != nil {\n  panic(err)\n}\n\n// - OR -\n\n// Create a new client with your token and host parsed from the environment\n// variables: OXIDE_TOKEN, OXIDE_HOST.\nclient, err := oxide.NewClientFromEnv(\"your apps user agent\")\nif err != nil {\n  panic(err)\n}",
      "install": "go get github.com/oxidecomputer/oxide.go"
    },
    "x-ts": {
      "client": "// Create a new HttpClient and configure it with the baseUrl and token.\nlet client = new Api({\n    baseUrl: \"$OXIDE_HOST\",\n    token: \"$OXIDE_TOKEN\",\n});",
      "install": "yarn add @oxidecomputer/api\n# - OR -\n$ npm install @oxidecomputer/api"
    },
    "x-rust": {
      "client": "use oxide_api::Client;\n\n// Authenticate via an API token.\nlet client = Client::new(\"$OXIDE_TOKEN\", \"$OXIDE_HOST\");\n\n// - OR -\n\n// Authenticate with your token and host parsed from the environment variables:\n// OXIDE_TOKEN, OXIDE_HOST.\nlet client = Client::new_from_env();",
      "install": "[dependencies]\noxide-api = \"0.1.0-rc.31\""
    }
  },
  "paths": {
    "/hardware/racks": {
      "get": {
        "tags": [
          "racks"
        ],
        "summary": "List racks in the system.",
        "operationId": "hardware_racks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RackResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List racks in the system.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `sortBy`\nrackResultsPage, err := client.Racks.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages: List racks in the system.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\nRack, err := client.Racks.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RacksService.List"
        },
        "x-ts": {
          "example": "let resp = client.hardwareRacksGet(query, params);"
        },
        "x-rust": {
          "example": "/**\n* List racks in the system.\n*\n* This function performs a `GET` to the `/hardware/racks` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::IdSortMode` -- Supported set of sort modes for scanning by id only.\n*  \n*  Currently, we only support scanning in ascending order.\n*/\nlet vec_crate_types_rack = client.racks().get_page(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* List racks in the system.\n*\n* This function performs a `GET` to the `/hardware/racks` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_rack = client.racks().get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/racks/struct.Racks.html#method.get_page"
        }
      }
    },
    "/hardware/racks/{rack_id}": {
      "get": {
        "tags": [
          "racks"
        ],
        "summary": "Fetch information about a particular rack.",
        "operationId": "hardware_racks_get_rack",
        "parameters": [
          {
            "in": "path",
            "name": "rack_id",
            "description": "The rack's unique ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rack"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Fetch information about a particular rack.\n//\n// Parameters:\n//\t- `rackId`: The rack's unique ID.\nrack, err := client.Racks.Get(rackID)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RacksService.Get"
        },
        "x-ts": {
          "example": "let resp = client.hardwareRacksGetRack(HardwareRacksGetRackParams{rackId}, params);"
        },
        "x-rust": {
          "example": "/**\n* Fetch information about a particular rack.\n*\n* This function performs a `GET` to the `/hardware/racks/{rack_id}` endpoint.\n*\n* **Parameters:**\n*\n* * `rack_id: &str` -- The rack's unique ID.\n*/\nlet rack = client.racks().get(rack_id).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/racks/struct.Racks.html#method.get"
        }
      }
    },
    "/hardware/sleds": {
      "get": {
        "tags": [
          "sleds"
        ],
        "summary": "List sleds in the system.",
        "operationId": "hardware_sleds_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List sleds in the system.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `sortBy`\nsledResultsPage, err := client.Sleds.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages: List sleds in the system.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\nSled, err := client.Sleds.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SledsService.List"
        },
        "x-ts": {
          "example": "let resp = client.hardwareSledsGet(query, params);"
        },
        "x-rust": {
          "example": "/**\n* List sleds in the system.\n*\n* This function performs a `GET` to the `/hardware/sleds` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::IdSortMode` -- Supported set of sort modes for scanning by id only.\n*  \n*  Currently, we only support scanning in ascending order.\n*/\nlet vec_crate_types_sled = client.sleds().get_page(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* List sleds in the system.\n*\n* This function performs a `GET` to the `/hardware/sleds` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_sled = client.sleds().get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sleds/struct.Sleds.html#method.get_page"
        }
      }
    },
    "/hardware/sleds/{sled_id}": {
      "get": {
        "tags": [
          "sleds"
        ],
        "summary": "Fetch information about a sled in the system.",
        "operationId": "hardware_sleds_get_sled",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "description": "The sled's unique ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sled"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Fetch information about a sled in the system.\n//\n// Parameters:\n//\t- `sledId`: The sled's unique ID.\nsled, err := client.Sleds.Get(sledID)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SledsService.Get"
        },
        "x-ts": {
          "example": "let resp = client.hardwareSledsGetSled(HardwareSledsGetSledParams{sledId}, params);"
        },
        "x-rust": {
          "example": "/**\n* Fetch information about a sled in the system.\n*\n* This function performs a `GET` to the `/hardware/sleds/{sled_id}` endpoint.\n*\n* **Parameters:**\n*\n* * `sled_id: &str` -- The sled's unique ID.\n*/\nlet sled = client.sleds().get(sled_id).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sleds/struct.Sleds.html#method.get"
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "hidden"
        ],
        "operationId": "spoof_login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": ""
          }
        },
        "x-go": {
          "example": "// SpoofLogin\nif err := client.Hidden.SpoofLogin(body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HiddenService.SpoofLogin"
        },
        "x-ts": {
          "example": "let resp = client.spoofLogin(query, data, params);"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/login` endpoint.\n*/\nclient.hidden().spoof_login(body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hidden/struct.Hidden.html#method.spoof_login"
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "hidden"
        ],
        "operationId": "logout",
        "responses": {
          "default": {
            "description": ""
          }
        },
        "x-go": {
          "example": "// Logout\nif err := client.Hidden.Logout(); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HiddenService.Logout"
        },
        "x-ts": {
          "example": "let resp = client.logout(query, params);"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/logout` endpoint.\n*/\nclient.hidden().logout().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hidden/struct.Hidden.html#method.logout"
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "List all organizations.",
        "operationId": "organizations_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List all organizations.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `sortBy`\norganizationResultsPage, err := client.Organizations.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages: List all organizations.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\nOrganization, err := client.Organizations.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.List"
        },
        "x-ts": {
          "example": "let resp = client.organizationsGet(query, params);"
        },
        "x-rust": {
          "example": "/**\n* List all organizations.\n*\n* This function performs a `GET` to the `/organizations` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameOrIdSortMode` -- Supported set of sort modes for scanning by name or id.\n*/\nlet vec_crate_types_organization = client.organizations().get_page(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* List all organizations.\n*\n* This function performs a `GET` to the `/organizations` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_organization = client.organizations().get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Create a new organization.",
        "operationId": "organizations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Create: Create a new organization.\norganization, err := client.Organizations.Create(body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Create"
        },
        "x-ts": {
          "example": "let resp = client.organizationsPost(query, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create a new organization.\n*\n* This function performs a `POST` to the `/organizations` endpoint.\n*/\nlet organization = client.organizations().post(body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Fetch a specific organization",
        "operationId": "organizations_get_organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Fetch a specific organization\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\norganization, err := client.Organizations.Get(organizationName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Get"
        },
        "x-ts": {
          "example": "let resp = client.organizationsGetOrganization(OrganizationsGetOrganizationParams{orgName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Fetch a specific organization.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet organization = client.organizations().get(organization_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.get"
        }
      },
      "put": {
        "tags": [
          "organizations"
        ],
        "summary": "Update a specific organization.",
        "operationId": "organizations_put_organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Put: Update a specific organization.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\norganization, err := client.Organizations.Put(organizationName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Put"
        },
        "x-ts": {
          "example": "let resp = client.organizationsPutOrganization(OrganizationsPutOrganizationParams{orgName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Update a specific organization.\n*\n* This function performs a `PUT` to the `/organizations/{organization_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet organization = client.organizations().put(organization_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.put"
        }
      },
      "delete": {
        "tags": [
          "organizations"
        ],
        "summary": "Delete a specific organization.",
        "operationId": "organizations_delete_organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Delete: Delete a specific organization.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\nif err := client.Organizations.Delete(organizationName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Delete"
        },
        "x-ts": {
          "example": "let resp = client.organizationsDeleteOrganization(OrganizationsDeleteOrganizationParams{orgName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Delete a specific organization.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.organizations().delete(organization_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "List all projects.",
        "operationId": "organization_projects_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List all projects.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`: The organization's unique name.\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `sortBy`\nprojectResultsPage, err := client.Projects.List(limit, pageToken, sortBy, organizationName)\n\n// - OR -\n\n// ListAllPages: List all projects.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `sortBy`\nProject, err := client.Projects.ListAllPages(sortBy, organizationName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.List"
        },
        "x-ts": {
          "example": "let resp = client.organizationProjectsGet(OrganizationProjectsGetParams{orgName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List all projects.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameOrIdSortMode` -- Supported set of sort modes for scanning by name or id.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_project = client.projects().get_page(limit, organization_name, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* List all projects.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_project = client.projects().get_all(organization_name, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new project.",
        "operationId": "organization_projects_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Create: Create a new project.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\nproject, err := client.Projects.Create(organizationName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Create"
        },
        "x-ts": {
          "example": "let resp = client.organizationProjectsPost(OrganizationProjectsPostParams{orgName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create a new project.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet project = client.projects().post(organization_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Fetch a specific project",
        "operationId": "organization_projects_get_project",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Fetch a specific project\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\nproject, err := client.Projects.Get(organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Get"
        },
        "x-ts": {
          "example": "let resp = client.organizationProjectsGetProject(OrganizationProjectsGetProjectParams{orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Fetch a specific project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet project = client.projects().get(organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.get"
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update a specific project.",
        "operationId": "organization_projects_put_project",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Put: Update a specific project.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\nproject, err := client.Projects.Put(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Put"
        },
        "x-ts": {
          "example": "let resp = client.organizationProjectsPutProject(OrganizationProjectsPutProjectParams{orgName, projectName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Update a specific project.\n*\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet project = client.projects().put(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.put"
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a specific project.",
        "operationId": "organization_projects_delete_project",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Delete: Delete a specific project.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\nif err := client.Projects.Delete(organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Delete"
        },
        "x-ts": {
          "example": "let resp = client.organizationProjectsDeleteProject(OrganizationProjectsDeleteProjectParams{orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Delete a specific project.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.projects().delete(organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/disks": {
      "get": {
        "tags": [
          "disks"
        ],
        "summary": "List disks in a project.",
        "operationId": "project_disks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List disks in a project.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`: The organization's unique name.\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`: The project's unique name within the organization.\n//\t- `sortBy`\ndiskResultsPage, err := client.Disks.List(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// ListAllPages: List disks in a project.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\n//\t- `sortBy`\nDisk, err := client.Disks.ListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#DisksService.List"
        },
        "x-ts": {
          "example": "let resp = client.projectDisksGet(ProjectDisksGetParams{orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List disks in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/disks` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_disk = client.disks().get_page(limit, organization_name, page_token, project_name, sort_by).await?;\n\n// - OR -\n\n/**\n* List disks in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/disks` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_disk = client.disks().get_all(organization_name, project_name, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/disks/struct.Disks.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "disks"
        ],
        "summary": "Create a disk in a project.",
        "operationId": "project_disks_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Create: Create a disk in a project.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\ndisk, err := client.Disks.Create(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#DisksService.Create"
        },
        "x-ts": {
          "example": "let resp = client.projectDisksPost(ProjectDisksPostParams{orgName, projectName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create a disk in a project.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/disks` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet disk = client.disks().post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/disks/struct.Disks.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/disks/{disk_name}": {
      "get": {
        "tags": [
          "disks"
        ],
        "summary": "Fetch a single disk in a project.",
        "operationId": "project_disks_get_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Fetch a single disk in a project.\n//\n// Parameters:\n//\t- `diskName`\n//\t- `organizationName`\n//\t- `projectName`\ndisk, err := client.Disks.Get(diskName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#DisksService.Get"
        },
        "x-ts": {
          "example": "let resp = client.projectDisksGetDisk(ProjectDisksGetDiskParams{diskName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Fetch a single disk in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/disks/{disk_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `disk_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet disk = client.disks().get(disk_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/disks/struct.Disks.html#method.get"
        }
      },
      "delete": {
        "tags": [
          "disks"
        ],
        "summary": "Delete a disk from a project.",
        "operationId": "project_disks_delete_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Delete: Delete a disk from a project.\n//\n// Parameters:\n//\t- `diskName`\n//\t- `organizationName`\n//\t- `projectName`\nif err := client.Disks.Delete(diskName, organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#DisksService.Delete"
        },
        "x-ts": {
          "example": "let resp = client.projectDisksDeleteDisk(ProjectDisksDeleteDiskParams{diskName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Delete a disk from a project.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/disks/{disk_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `disk_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.disks().delete(disk_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/disks/struct.Disks.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "List instances in a project.",
        "operationId": "project_instances_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List instances in a project.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`: The organization's unique name.\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`: The project's unique name within the organization.\n//\t- `sortBy`\ninstanceResultsPage, err := client.Instances.List(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// ListAllPages: List instances in a project.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\n//\t- `sortBy`\nInstance, err := client.Instances.ListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.List"
        },
        "x-ts": {
          "example": "let resp = client.projectInstancesGet(ProjectInstancesGetParams{orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List instances in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_instance = client.instances().get_page(limit, organization_name, page_token, project_name, sort_by).await?;\n\n// - OR -\n\n/**\n* List instances in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_instance = client.instances().get_all(organization_name, project_name, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Create an instance in a project.",
        "operationId": "project_instances_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Create: Create an instance in a project.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\ninstance, err := client.Instances.Create(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Create"
        },
        "x-ts": {
          "example": "let resp = client.projectInstancesPost(ProjectInstancesPostParams{orgName, projectName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create an instance in a project.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet instance = client.instances().post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get an instance in a project.",
        "operationId": "project_instances_get_instance",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Get an instance in a project.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\ninstance, err := client.Instances.Get(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Get"
        },
        "x-ts": {
          "example": "let resp = client.projectInstancesGetInstance(ProjectInstancesGetInstanceParams{instanceName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Get an instance in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet instance = client.instances().get(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.get"
        }
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "summary": "Delete an instance from a project.",
        "operationId": "project_instances_delete_instance",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Delete: Delete an instance from a project.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\nif err := client.Instances.Delete(instanceName, organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Delete"
        },
        "x-ts": {
          "example": "let resp = client.projectInstancesDeleteInstance(ProjectInstancesDeleteInstanceParams{instanceName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Delete an instance from a project.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.instances().delete(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "List disks attached to this instance.",
        "operationId": "instance_disks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// DisksList: List disks attached to this instance.\n//\n// To iterate over all pages, use the `DisksListAllPages` method, instead.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`\n//\t- `sortBy`\ndiskResultsPage, err := client.Instances.DisksList(limit, pageToken, sortBy, instanceName, organizationName, projectName)\n\n// - OR -\n\n// DisksListAllPages: List disks attached to this instance.\n//\n// This method is a wrapper around the `DisksList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\nDisk, err := client.Instances.DisksListAllPages(sortBy, instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.DisksList"
        },
        "x-ts": {
          "example": "let resp = client.instanceDisksGet(InstanceDisksGetParams{instanceName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List disks attached to this instance.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_disk = client.instances().disks_get(instance_name, limit, organization_name, page_token, project_name, sort_by).await?;\n\n// - OR -\n\n/**\n* List disks attached to this instance.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks` endpoint.\n*\n* As opposed to `disks_get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_disk = client.instances().disks_get_all(instance_name, organization_name, project_name, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.disks_get"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/attach": {
      "post": {
        "tags": [
          "instances"
        ],
        "operationId": "instance_disks_attach",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// DisksAttach\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\ndisk, err := client.Instances.DisksAttach(instanceName, organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.DisksAttach"
        },
        "x-ts": {
          "example": "let resp = client.instanceDisksAttach(InstanceDisksAttachParams{instanceName, orgName, projectName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/attach` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet disk = client.instances().disks_attach(instance_name, organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.disks_attach"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/detach": {
      "post": {
        "tags": [
          "instances"
        ],
        "operationId": "instance_disks_detach",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// DisksDetach\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\ndisk, err := client.Instances.DisksDetach(instanceName, organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.DisksDetach"
        },
        "x-ts": {
          "example": "let resp = client.instanceDisksDetach(InstanceDisksDetachParams{instanceName, orgName, projectName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/detach` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet disk = client.instances().disks_detach(instance_name, organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.disks_detach"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/migrate": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Migrate an instance to a different propolis-server, possibly on a different sled.",
        "operationId": "project_instances_migrate_instance",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceMigrate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Migrate: Migrate an instance to a different propolis-server, possibly on a different sled.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\ninstance, err := client.Instances.Migrate(instanceName, organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Migrate"
        },
        "x-ts": {
          "example": "let resp = client.projectInstancesMigrateInstance(ProjectInstancesMigrateInstanceParams{instanceName, orgName, projectName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Migrate an instance to a different propolis-server, possibly on a different sled.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/migrate` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet instance = client.instances().migrate(instance_name, organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.migrate"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/network-interfaces": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "List network interfaces attached to this instance.",
        "operationId": "instance_network_interfaces_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkInterfaceResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// NetworkInterfacesList: List network interfaces attached to this instance.\n//\n// To iterate over all pages, use the `NetworkInterfacesListAllPages` method, instead.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`\n//\t- `sortBy`\nnetworkInterfaceResultsPage, err := client.Instances.NetworkInterfacesList(limit, pageToken, sortBy, instanceName, organizationName, projectName)\n\n// - OR -\n\n// NetworkInterfacesListAllPages: List network interfaces attached to this instance.\n//\n// This method is a wrapper around the `NetworkInterfacesList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\nNetworkInterface, err := client.Instances.NetworkInterfacesListAllPages(sortBy, instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.NetworkInterfacesList"
        },
        "x-ts": {
          "example": "let resp = client.instanceNetworkInterfacesGet(InstanceNetworkInterfacesGetParams{instanceName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List network interfaces attached to this instance.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/network-interfaces` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_network_interface = client.instances().network_interfaces_get(instance_name, limit, organization_name, page_token, project_name, sort_by).await?;\n\n// - OR -\n\n/**\n* List network interfaces attached to this instance.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/network-interfaces` endpoint.\n*\n* As opposed to `network_interfaces_get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_network_interface = client.instances().network_interfaces_get_all(instance_name, organization_name, project_name, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.network_interfaces_get"
        }
      },
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Create a network interface for an instance.",
        "operationId": "instance_network_interfaces_post",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkInterfaceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkInterface"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// NetworkInterfacesCreate: Create a network interface for an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\nnetworkInterface, err := client.Instances.NetworkInterfacesCreate(instanceName, organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.NetworkInterfacesCreate"
        },
        "x-ts": {
          "example": "let resp = client.instanceNetworkInterfacesPost(InstanceNetworkInterfacesPostParams{instanceName, orgName, projectName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create a network interface for an instance.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/network-interfaces` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet network_interface = client.instances().network_interfaces_post(instance_name, organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.network_interfaces_post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/network-interfaces/{interface_name}": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get an interface attached to an instance.",
        "operationId": "instance_network_interfaces_get_interface",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "interface_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkInterface"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// NetworkInterfacesGetInterface: Get an interface attached to an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `interfaceName`\n//\t- `organizationName`\n//\t- `projectName`\nnetworkInterface, err := client.Instances.NetworkInterfacesGetInterface(instanceName, interfaceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.NetworkInterfacesGetInterface"
        },
        "x-ts": {
          "example": "let resp = client.instanceNetworkInterfacesGetInterface(InstanceNetworkInterfacesGetInterfaceParams{instanceName, interfaceName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Get an interface attached to an instance.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/network-interfaces/{interface_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `interface_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet network_interface = client.instances().network_interfaces_get_interface(instance_name, interface_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.network_interfaces_get_interface"
        }
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "summary": "Detach a network interface from an instance.",
        "operationId": "instance_network_interfaces_delete_interface",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "interface_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// NetworkInterfacesDeleteInterface: Detach a network interface from an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `interfaceName`\n//\t- `organizationName`\n//\t- `projectName`\nif err := client.Instances.NetworkInterfacesDeleteInterface(instanceName, interfaceName, organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.NetworkInterfacesDeleteInterface"
        },
        "x-ts": {
          "example": "let resp = client.instanceNetworkInterfacesDeleteInterface(InstanceNetworkInterfacesDeleteInterfaceParams{instanceName, interfaceName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Detach a network interface from an instance.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/network-interfaces/{interface_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `interface_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.instances().network_interfaces_delete_interface(instance_name, interface_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.network_interfaces_delete_interface"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/reboot": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Reboot an instance.",
        "operationId": "project_instances_instance_reboot",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Reboot: Reboot an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\ninstance, err := client.Instances.Reboot(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Reboot"
        },
        "x-ts": {
          "example": "let resp = client.projectInstancesInstanceReboot(ProjectInstancesInstanceRebootParams{instanceName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Reboot an instance.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/reboot` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet instance = client.instances().reboot(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.reboot"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/start": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Boot an instance.",
        "operationId": "project_instances_instance_start",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Start: Boot an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\ninstance, err := client.Instances.Start(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Start"
        },
        "x-ts": {
          "example": "let resp = client.projectInstancesInstanceStart(ProjectInstancesInstanceStartParams{instanceName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Boot an instance.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/start` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet instance = client.instances().start(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.start"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/stop": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Halt an instance.",
        "operationId": "project_instances_instance_stop",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Stop: Halt an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\ninstance, err := client.Instances.Stop(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Stop"
        },
        "x-ts": {
          "example": "let resp = client.projectInstancesInstanceStop(ProjectInstancesInstanceStopParams{instanceName, orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Halt an instance.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/stop` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet instance = client.instances().stop(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.stop"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/snapshots": {
      "get": {
        "tags": [
          "snapshots"
        ],
        "summary": "List snapshots in a project.",
        "operationId": "project_snapshots_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List snapshots in a project.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`: The organization's unique name.\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`: The project's unique name within the organization.\n//\t- `sortBy`\nsnapshotResultsPage, err := client.Snapshots.List(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// ListAllPages: List snapshots in a project.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\n//\t- `sortBy`\nSnapshot, err := client.Snapshots.ListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SnapshotsService.List"
        },
        "x-ts": {
          "example": "let resp = client.projectSnapshotsGet(ProjectSnapshotsGetParams{orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List snapshots in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/snapshots` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_snapshot = client.snapshots().get_page(limit, organization_name, page_token, project_name, sort_by).await?;\n\n// - OR -\n\n/**\n* List snapshots in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/snapshots` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_snapshot = client.snapshots().get_all(organization_name, project_name, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/snapshots/struct.Snapshots.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "snapshots"
        ],
        "summary": "Create a snapshot of a disk.",
        "operationId": "project_snapshots_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Create: Create a snapshot of a disk.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\nsnapshot, err := client.Snapshots.Create(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SnapshotsService.Create"
        },
        "x-ts": {
          "example": "let resp = client.projectSnapshotsPost(ProjectSnapshotsPostParams{orgName, projectName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create a snapshot of a disk.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/snapshots` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet snapshot = client.snapshots().post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/snapshots/struct.Snapshots.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/snapshots/{snapshot_name}": {
      "get": {
        "tags": [
          "snapshots"
        ],
        "summary": "Get a snapshot in a project.",
        "operationId": "project_snapshots_get_snapshot",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "snapshot_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Get a snapshot in a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `snapshotName`\nsnapshot, err := client.Snapshots.Get(organizationName, projectName, snapshotName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SnapshotsService.Get"
        },
        "x-ts": {
          "example": "let resp = client.projectSnapshotsGetSnapshot(ProjectSnapshotsGetSnapshotParams{orgName, projectName, snapshotName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Get a snapshot in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/snapshots/{snapshot_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `snapshot_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet snapshot = client.snapshots().get(organization_name, project_name, snapshot_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/snapshots/struct.Snapshots.html#method.get"
        }
      },
      "delete": {
        "tags": [
          "snapshots"
        ],
        "summary": "Delete a snapshot from a project.",
        "operationId": "project_snapshots_delete_snapshot",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "snapshot_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Delete: Delete a snapshot from a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `snapshotName`\nif err := client.Snapshots.Delete(organizationName, projectName, snapshotName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SnapshotsService.Delete"
        },
        "x-ts": {
          "example": "let resp = client.projectSnapshotsDeleteSnapshot(ProjectSnapshotsDeleteSnapshotParams{orgName, projectName, snapshotName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Delete a snapshot from a project.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/snapshots/{snapshot_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `snapshot_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.snapshots().delete(organization_name, project_name, snapshot_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/snapshots/struct.Snapshots.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "List VPCs in a project.",
        "operationId": "project_vpcs_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List VPCs in a project.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`: The organization's unique name.\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`: The project's unique name within the organization.\n//\t- `sortBy`\nvPCResultsPage, err := client.VPCs.List(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// ListAllPages: List VPCs in a project.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\n//\t- `sortBy`\nVPC, err := client.VPCs.ListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VPCsService.List"
        },
        "x-ts": {
          "example": "let resp = client.projectVpcsGet(ProjectVpcsGetParams{orgName, projectName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List VPCs in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_vpc = client.vpcs().get_page(limit, organization_name, page_token, project_name, sort_by).await?;\n\n// - OR -\n\n/**\n* List VPCs in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_vpc = client.vpcs().get_all(organization_name, project_name, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "vpcs"
        ],
        "summary": "Create a VPC in a project.",
        "operationId": "project_vpcs_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "description": "The organization's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "description": "The project's unique name within the organization.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Create: Create a VPC in a project.\n//\n// Parameters:\n//\t- `organizationName`: The organization's unique name.\n//\t- `projectName`: The project's unique name within the organization.\nvPC, err := client.VPCs.Create(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VPCsService.Create"
        },
        "x-ts": {
          "example": "let resp = client.projectVpcsPost(ProjectVpcsPostParams{orgName, projectName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create a VPC in a project.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/vpcs` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc = client.vpcs().post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "Get a VPC in a project.",
        "operationId": "project_vpcs_get_vpc",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Get a VPC in a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\nvPC, err := client.VPCs.Get(organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VPCsService.Get"
        },
        "x-ts": {
          "example": "let resp = client.projectVpcsGetVpc(ProjectVpcsGetVpcParams{orgName, projectName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Get a VPC in a project.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc = client.vpcs().get(organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.get"
        }
      },
      "put": {
        "tags": [
          "vpcs"
        ],
        "summary": "Update a VPC.",
        "operationId": "project_vpcs_put_vpc",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Put: Update a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\nvPC, err := client.VPCs.Put(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VPCsService.Put"
        },
        "x-ts": {
          "example": "let resp = client.projectVpcsPutVpc(ProjectVpcsPutVpcParams{orgName, projectName, vpcName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Update a VPC.\n*\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc = client.vpcs().put(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.put"
        }
      },
      "delete": {
        "tags": [
          "vpcs"
        ],
        "summary": "Delete a vpc from a project.",
        "operationId": "project_vpcs_delete_vpc",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Delete: Delete a vpc from a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\nif err := client.VPCs.Delete(organizationName, projectName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VPCsService.Delete"
        },
        "x-ts": {
          "example": "let resp = client.projectVpcsDeleteVpc(ProjectVpcsDeleteVpcParams{orgName, projectName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Delete a vpc from a project.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.vpcs().delete(organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules": {
      "get": {
        "tags": [
          "firewall"
        ],
        "summary": "List firewall rules for a VPC.",
        "operationId": "vpc_firewall_rules_get",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcFirewallRules"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// RulesList: List firewall rules for a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\nfirewallRules, err := client.Firewall.RulesList(organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#FirewallService.RulesList"
        },
        "x-ts": {
          "example": "let resp = client.vpcFirewallRulesGet(VpcFirewallRulesGetParams{orgName, projectName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List firewall rules for a VPC.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc_firewall_rules = client.firewall().rules_get(organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/firewall/struct.Firewall.html#method.rules_get"
        }
      },
      "put": {
        "tags": [
          "firewall"
        ],
        "summary": "Replace the firewall rules for a VPC",
        "operationId": "vpc_firewall_rules_put",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcFirewallRuleUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcFirewallRules"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// RulesPut: Replace the firewall rules for a VPC\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\nfirewallRules, err := client.Firewall.RulesPut(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#FirewallService.RulesPut"
        },
        "x-ts": {
          "example": "let resp = client.vpcFirewallRulesPut(VpcFirewallRulesPutParams{orgName, projectName, vpcName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Replace the firewall rules for a VPC.\n*\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc_firewall_rules = client.firewall().rules_put(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/firewall/struct.Firewall.html#method.rules_put"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers": {
      "get": {
        "tags": [
          "routers"
        ],
        "summary": "List VPC Custom and System Routers",
        "operationId": "vpc_routers_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouterResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List VPC Custom and System Routers\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\nrouterResultsPage, err := client.Routers.List(limit, pageToken, sortBy, organizationName, projectName, vpcName)\n\n// - OR -\n\n// ListAllPages: List VPC Custom and System Routers\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\nRouter, err := client.Routers.ListAllPages(sortBy, organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.List"
        },
        "x-ts": {
          "example": "let resp = client.vpcRoutersGet(VpcRoutersGetParams{orgName, projectName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List VPC Custom and System Routers.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_vpc_router = client.routers().get_page(limit, organization_name, page_token, project_name, sort_by, vpc_name).await?;\n\n// - OR -\n\n/**\n* List VPC Custom and System Routers.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_vpc_router = client.routers().get_all(organization_name, project_name, sort_by, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "routers"
        ],
        "summary": "Create a VPC Router",
        "operationId": "vpc_routers_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcRouterCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Create: Create a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\nrouter, err := client.Routers.Create(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.Create"
        },
        "x-ts": {
          "example": "let resp = client.vpcRoutersPost(VpcRoutersPostParams{orgName, projectName, vpcName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create a VPC Router.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc_router = client.routers().post(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}": {
      "get": {
        "tags": [
          "routers"
        ],
        "summary": "Get a VPC Router",
        "operationId": "vpc_routers_get_router",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Get a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\nrouter, err := client.Routers.Get(organizationName, projectName, routerName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.Get"
        },
        "x-ts": {
          "example": "let resp = client.vpcRoutersGetRouter(VpcRoutersGetRouterParams{orgName, projectName, routerName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Get a VPC Router.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `router_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc_router = client.routers().get(organization_name, project_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.get"
        }
      },
      "put": {
        "tags": [
          "routers"
        ],
        "summary": "Update a VPC Router",
        "operationId": "vpc_routers_put_router",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcRouterUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Put: Update a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\nrouter, err := client.Routers.Put(organizationName, projectName, routerName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.Put"
        },
        "x-ts": {
          "example": "let resp = client.vpcRoutersPutRouter(VpcRoutersPutRouterParams{orgName, projectName, routerName, vpcName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Update a VPC Router.\n*\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `router_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc_router = client.routers().put(organization_name, project_name, router_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.put"
        }
      },
      "delete": {
        "tags": [
          "routers"
        ],
        "summary": "Delete a router from its VPC",
        "operationId": "vpc_routers_delete_router",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Delete: Delete a router from its VPC\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\nif err := client.Routers.Delete(organizationName, projectName, routerName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.Delete"
        },
        "x-ts": {
          "example": "let resp = client.vpcRoutersDeleteRouter(VpcRoutersDeleteRouterParams{orgName, projectName, routerName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Delete a router from its VPC.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `router_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.routers().delete(organization_name, project_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "List a Router's routes",
        "operationId": "routers_routes_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRouteResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List a Router's routes\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`\n//\t- `routerName`\n//\t- `sortBy`\n//\t- `vpcName`\nrouteResultsPage, err := client.Routes.List(limit, pageToken, sortBy, organizationName, projectName, routerName, vpcName)\n\n// - OR -\n\n// ListAllPages: List a Router's routes\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `sortBy`\n//\t- `vpcName`\nRoute, err := client.Routes.ListAllPages(sortBy, organizationName, projectName, routerName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.List"
        },
        "x-ts": {
          "example": "let resp = client.routersRoutesGet(RoutersRoutesGetParams{orgName, projectName, routerName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List a Router's routes.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `router_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_router_route = client.routes().get_page(limit, organization_name, page_token, project_name, router_name, sort_by, vpc_name).await?;\n\n// - OR -\n\n/**\n* List a Router's routes.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_router_route = client.routes().get_all(organization_name, project_name, router_name, sort_by, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "routes"
        ],
        "summary": "Create a VPC Router",
        "operationId": "routers_routes_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterRouteCreateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Create: Create a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\nroute, err := client.Routes.Create(organizationName, projectName, routerName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.Create"
        },
        "x-ts": {
          "example": "let resp = client.routersRoutesPost(RoutersRoutesPostParams{orgName, projectName, routerName, vpcName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create a VPC Router.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `router_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet router_route = client.routes().post(organization_name, project_name, router_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "Get a VPC Router route",
        "operationId": "routers_routes_get_route",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "route_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Get a VPC Router route\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routeName`\n//\t- `routerName`\n//\t- `vpcName`\nroute, err := client.Routes.Get(organizationName, projectName, routeName, routerName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.Get"
        },
        "x-ts": {
          "example": "let resp = client.routersRoutesGetRoute(RoutersRoutesGetRouteParams{orgName, projectName, routeName, routerName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Get a VPC Router route.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `route_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `router_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet router_route = client.routes().get(organization_name, project_name, route_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.get"
        }
      },
      "put": {
        "tags": [
          "routes"
        ],
        "summary": "Update a Router route",
        "operationId": "routers_routes_put_route",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "route_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterRouteUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Put: Update a Router route\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routeName`\n//\t- `routerName`\n//\t- `vpcName`\nroute, err := client.Routes.Put(organizationName, projectName, routeName, routerName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.Put"
        },
        "x-ts": {
          "example": "let resp = client.routersRoutesPutRoute(RoutersRoutesPutRouteParams{orgName, projectName, routeName, routerName, vpcName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Update a Router route.\n*\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `route_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `router_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet router_route = client.routes().put(organization_name, project_name, route_name, router_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.put"
        }
      },
      "delete": {
        "tags": [
          "routes"
        ],
        "summary": "Delete a route from its router",
        "operationId": "routers_routes_delete_route",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "route_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Delete: Delete a route from its router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routeName`\n//\t- `routerName`\n//\t- `vpcName`\nif err := client.Routes.Delete(organizationName, projectName, routeName, routerName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.Delete"
        },
        "x-ts": {
          "example": "let resp = client.routersRoutesDeleteRoute(RoutersRoutesDeleteRouteParams{orgName, projectName, routeName, routerName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Delete a route from its router.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `route_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `router_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.routes().delete(organization_name, project_name, route_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets": {
      "get": {
        "tags": [
          "subnets"
        ],
        "summary": "List subnets in a VPC.",
        "operationId": "vpc_subnets_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnetResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List subnets in a VPC.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\nsubnetResultsPage, err := client.Subnets.List(limit, pageToken, sortBy, organizationName, projectName, vpcName)\n\n// - OR -\n\n// ListAllPages: List subnets in a VPC.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\nSubnet, err := client.Subnets.ListAllPages(sortBy, organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.List"
        },
        "x-ts": {
          "example": "let resp = client.vpcSubnetsGet(VpcSubnetsGetParams{orgName, projectName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List subnets in a VPC.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_vpc_subnet = client.subnets().get_page(limit, organization_name, page_token, project_name, sort_by, vpc_name).await?;\n\n// - OR -\n\n/**\n* List subnets in a VPC.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_vpc_subnet = client.subnets().get_all(organization_name, project_name, sort_by, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "subnets"
        ],
        "summary": "Create a subnet in a VPC.",
        "operationId": "vpc_subnets_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcSubnetCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Create: Create a subnet in a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\nsubnet, err := client.Subnets.Create(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.Create"
        },
        "x-ts": {
          "example": "let resp = client.vpcSubnetsPost(VpcSubnetsPostParams{orgName, projectName, vpcName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Create a subnet in a VPC.\n*\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc_subnet = client.subnets().post(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}": {
      "get": {
        "tags": [
          "subnets"
        ],
        "summary": "Get subnet in a VPC.",
        "operationId": "vpc_subnets_get_subnet",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Get subnet in a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `subnetName`\n//\t- `vpcName`\nsubnet, err := client.Subnets.Get(organizationName, projectName, subnetName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.Get"
        },
        "x-ts": {
          "example": "let resp = client.vpcSubnetsGetSubnet(VpcSubnetsGetSubnetParams{orgName, projectName, subnetName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Get subnet in a VPC.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `subnet_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc_subnet = client.subnets().get(organization_name, project_name, subnet_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.get"
        }
      },
      "put": {
        "tags": [
          "subnets"
        ],
        "summary": "Update a VPC Subnet.",
        "operationId": "vpc_subnets_put_subnet",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcSubnetUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Put: Update a VPC Subnet.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `subnetName`\n//\t- `vpcName`\nsubnet, err := client.Subnets.Put(organizationName, projectName, subnetName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.Put"
        },
        "x-ts": {
          "example": "let resp = client.vpcSubnetsPutSubnet(VpcSubnetsPutSubnetParams{orgName, projectName, subnetName, vpcName}, data, params);"
        },
        "x-rust": {
          "example": "/**\n* Update a VPC Subnet.\n*\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `subnet_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vpc_subnet = client.subnets().put(organization_name, project_name, subnet_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.put"
        }
      },
      "delete": {
        "tags": [
          "subnets"
        ],
        "summary": "Delete a subnet from a VPC.",
        "operationId": "vpc_subnets_delete_subnet",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Delete: Delete a subnet from a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `subnetName`\n//\t- `vpcName`\nif err := client.Subnets.Delete(organizationName, projectName, subnetName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.Delete"
        },
        "x-ts": {
          "example": "let resp = client.vpcSubnetsDeleteSubnet(VpcSubnetsDeleteSubnetParams{orgName, projectName, subnetName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Delete a subnet from a VPC.\n*\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `subnet_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nclient.subnets().delete(organization_name, project_name, subnet_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}/network-interfaces": {
      "get": {
        "tags": [
          "subnets"
        ],
        "summary": "List network interfaces in a VPC subnet.",
        "operationId": "subnet_network_interfaces_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkInterfaceResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// NetworkInterfacesList: List network interfaces in a VPC subnet.\n//\n// To iterate over all pages, use the `NetworkInterfacesListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `organizationName`\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `subnetName`\n//\t- `vpcName`\nnetworkInterfaceResultsPage, err := client.Subnets.NetworkInterfacesList(limit, pageToken, sortBy, organizationName, projectName, subnetName, vpcName)\n\n// - OR -\n\n// NetworkInterfacesListAllPages: List network interfaces in a VPC subnet.\n//\n// This method is a wrapper around the `NetworkInterfacesList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `subnetName`\n//\t- `vpcName`\nNetworkInterface, err := client.Subnets.NetworkInterfacesListAllPages(sortBy, organizationName, projectName, subnetName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.NetworkInterfacesList"
        },
        "x-ts": {
          "example": "let resp = client.subnetNetworkInterfacesGet(SubnetNetworkInterfacesGetParams{orgName, projectName, subnetName, vpcName}, params);"
        },
        "x-rust": {
          "example": "/**\n* List network interfaces in a VPC subnet.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}/network-interfaces` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `project_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `subnet_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n* * `vpc_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet vec_crate_types_network_interface = client.subnets().network_interfaces_get(limit, organization_name, page_token, project_name, sort_by, subnet_name, vpc_name).await?;\n\n// - OR -\n\n/**\n* List network interfaces in a VPC subnet.\n*\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}/network-interfaces` endpoint.\n*\n* As opposed to `network_interfaces_get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_network_interface = client.subnets().network_interfaces_get_all(organization_name, project_name, sort_by, subnet_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.network_interfaces_get"
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "List the built-in roles",
        "operationId": "roles_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List the built-in roles\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\nroleResultsPage, err := client.Roles.List(limit, pageToken)\n\n// - OR -\n\n// ListAllPages: List the built-in roles\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\nRole, err := client.Roles.ListAllPages(,)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RolesService.List"
        },
        "x-ts": {
          "example": "let resp = client.rolesGet(query, params);"
        },
        "x-rust": {
          "example": "/**\n* List the built-in roles.\n*\n* This function performs a `GET` to the `/roles` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n*/\nlet vec_crate_types_role = client.roles().get_page(limit, page_token).await?;\n\n// - OR -\n\n/**\n* List the built-in roles.\n*\n* This function performs a `GET` to the `/roles` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_role = client.roles().get_all().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/roles/struct.Roles.html#method.get_page"
        }
      }
    },
    "/roles/{role_name}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Fetch a specific built-in role",
        "operationId": "roles_get_role",
        "parameters": [
          {
            "in": "path",
            "name": "role_name",
            "description": "The built-in role's unique name.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Fetch a specific built-in role\n//\n// Parameters:\n//\t- `roleName`: The built-in role's unique name.\nrole, err := client.Roles.Get(roleName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RolesService.Get"
        },
        "x-ts": {
          "example": "let resp = client.rolesGetRole(RolesGetRoleParams{roleName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Fetch a specific built-in role.\n*\n* This function performs a `GET` to the `/roles/{role_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `role_name: &str` -- The built-in role's unique name.\n*/\nlet role = client.roles().get(role_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/roles/struct.Roles.html#method.get"
        }
      }
    },
    "/sagas": {
      "get": {
        "tags": [
          "sagas"
        ],
        "summary": "List all sagas (for debugging)",
        "operationId": "sagas_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SagaResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List all sagas (for debugging)\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `sortBy`\nsagaResultsPage, err := client.Sagas.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages: List all sagas (for debugging)\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\nSaga, err := client.Sagas.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SagasService.List"
        },
        "x-ts": {
          "example": "let resp = client.sagasGet(query, params);"
        },
        "x-rust": {
          "example": "/**\n* List all sagas (for debugging).\n*\n* This function performs a `GET` to the `/sagas` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::IdSortMode` -- Supported set of sort modes for scanning by id only.\n*  \n*  Currently, we only support scanning in ascending order.\n*/\nlet vec_crate_types_saga = client.sagas().get_page(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* List all sagas (for debugging).\n*\n* This function performs a `GET` to the `/sagas` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_saga = client.sagas().get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sagas/struct.Sagas.html#method.get_page"
        }
      }
    },
    "/sagas/{saga_id}": {
      "get": {
        "tags": [
          "sagas"
        ],
        "summary": "Fetch information about a single saga (for debugging)",
        "operationId": "sagas_get_saga",
        "parameters": [
          {
            "in": "path",
            "name": "saga_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Saga"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Fetch information about a single saga (for debugging)\n//\n// Parameters:\n//\t- `sagaId`\nsaga, err := client.Sagas.Get(sagaID)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SagasService.Get"
        },
        "x-ts": {
          "example": "let resp = client.sagasGetSaga(SagasGetSagaParams{sagaId}, params);"
        },
        "x-rust": {
          "example": "/**\n* Fetch information about a single saga (for debugging).\n*\n* This function performs a `GET` to the `/sagas/{saga_id}` endpoint.\n*\n* **Parameters:**\n*\n* * `saga_id: &str`\n*/\nlet saga = client.sagas().get(saga_id).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sagas/struct.Sagas.html#method.get"
        }
      }
    },
    "/session/me": {
      "get": {
        "tags": [
          "hidden"
        ],
        "summary": "Fetch the user associated with the current session",
        "operationId": "session_me",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionUser"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// SessionMe: Fetch the user associated with the current session\nsessionUser, err := client.Hidden.SessionMe()",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HiddenService.SessionMe"
        },
        "x-ts": {
          "example": "let resp = client.sessionMe(query, params);"
        },
        "x-rust": {
          "example": "/**\n* Fetch the user associated with the current session.\n*\n* This function performs a `GET` to the `/session/me` endpoint.\n*/\nlet session_user = client.hidden().session_me().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hidden/struct.Hidden.html#method.session_me"
        }
      }
    },
    "/timeseries/schema": {
      "get": {
        "tags": [
          "metrics"
        ],
        "summary": "List all timeseries schema",
        "operationId": "timeseries_schema_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeseriesSchemaResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// TimeseriesSchemaList: List all timeseries schema\n//\n// To iterate over all pages, use the `TimeseriesSchemaListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\ntimeseriesSchemaResultsPage, err := client.Metrics.TimeseriesSchemaList(limit, pageToken)\n\n// - OR -\n\n// TimeseriesSchemaListAllPages: List all timeseries schema\n//\n// This method is a wrapper around the `TimeseriesSchemaList` method.\n// This method returns all the pages at once.\nTimeseriesSchema, err := client.Metrics.TimeseriesSchemaListAllPages(,)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#MetricsService.TimeseriesSchemaList"
        },
        "x-ts": {
          "example": "let resp = client.timeseriesSchemaGet(query, params);"
        },
        "x-rust": {
          "example": "/**\n* List all timeseries schema.\n*\n* This function performs a `GET` to the `/timeseries/schema` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n*/\nlet vec_crate_types_timeseries_schema = client.metrics().timeseries_schema_get(limit, page_token).await?;\n\n// - OR -\n\n/**\n* List all timeseries schema.\n*\n* This function performs a `GET` to the `/timeseries/schema` endpoint.\n*\n* As opposed to `timeseries_schema_get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_timeseries_schema = client.metrics().timeseries_schema_get_all().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/metrics/struct.Metrics.html#method.timeseries_schema_get"
        }
      }
    },
    "/updates/refresh": {
      "post": {
        "tags": [
          "updates"
        ],
        "summary": "Refresh update metadata",
        "operationId": "updates_refresh",
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Refresh: Refresh update metadata\nif err := client.Updates.Refresh(); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#UpdatesService.Refresh"
        },
        "x-ts": {
          "example": "let resp = client.updatesRefresh(query, params);"
        },
        "x-rust": {
          "example": "/**\n* Refresh update metadata.\n*\n* This function performs a `POST` to the `/updates/refresh` endpoint.\n*/\nclient.updates().refresh().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/updates/struct.Updates.html#method.refresh"
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List the built-in system users",
        "operationId": "users_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retreive the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List: List the built-in system users\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`: Maximum number of items returned by a single call\n//\t- `pageToken`: Token returned by previous call to retreive the subsequent page\n//\t- `sortBy`\nuserResultsPage, err := client.Users.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages: List the built-in system users\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\nUser, err := client.Users.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#UsersService.List"
        },
        "x-ts": {
          "example": "let resp = client.usersGet(query, params);"
        },
        "x-rust": {
          "example": "/**\n* List the built-in system users.\n*\n* This function performs a `GET` to the `/users` endpoint.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- Maximum number of items returned by a single call.\n* * `page_token: &str` -- Token returned by previous call to retreive the subsequent page.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n*/\nlet vec_crate_types_user = client.users().get_page(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* List the built-in system users.\n*\n* This function performs a `GET` to the `/users` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*/\nlet vec_crate_types_user = client.users().get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/users/struct.Users.html#method.get_page"
        }
      }
    },
    "/users/{user_name}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Fetch a specific built-in system user",
        "operationId": "users_get_user",
        "parameters": [
          {
            "in": "path",
            "name": "user_name",
            "description": "The built-in user's unique name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-go": {
          "example": "// Get: Fetch a specific built-in system user\n//\n// Parameters:\n//\t- `userName`: The built-in user's unique name.\nuser, err := client.Users.Get(userName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#UsersService.Get"
        },
        "x-ts": {
          "example": "let resp = client.usersGetUser(UsersGetUserParams{userName}, params);"
        },
        "x-rust": {
          "example": "/**\n* Fetch a specific built-in system user.\n*\n* This function performs a `GET` to the `/users/{user_name}` endpoint.\n*\n* **Parameters:**\n*\n* * `user_name: &str` -- Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.\n*/\nlet user = client.users().get(user_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/users/struct.Users.html#method.get"
        }
      }
    }
  },
  "components": {
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "ByteCount": {
        "description": "A count of bytes, typically used either for memory or storage capacity\n\nThe maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "DatumType": {
        "description": "The type of an individual datum of a metric.",
        "type": "string",
        "enum": [
          "Bool",
          "I64",
          "F64",
          "String",
          "Bytes",
          "CumulativeI64",
          "CumulativeF64",
          "HistogramI64",
          "HistogramF64"
        ]
      },
      "Disk": {
        "description": "Client view of an [`Disk`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "device_path": {
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "project_id": {
            "type": "string",
            "format": "uuid"
          },
          "size": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "snapshot_id": {
            "nullable": true,
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/DiskState"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "device_path",
          "id",
          "name",
          "project_id",
          "size",
          "state",
          "time_created",
          "time_modified"
        ]
      },
      "DiskCreate": {
        "description": "Create-time parameters for a [`Disk`](omicron_common::api::external::Disk)",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "size": {
            "description": "size of the Disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "snapshot_id": {
            "nullable": true,
            "description": "id for snapshot from which the Disk should be created, if any",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "name",
          "size"
        ]
      },
      "DiskIdentifier": {
        "description": "Parameters for the [`Disk`](omicron_common::api::external::Disk) to be attached or detached to an instance",
        "type": "object",
        "properties": {
          "disk": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "disk"
        ]
      },
      "DiskResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Disk"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "DiskState": {
        "description": "State of a Disk (primarily: attached or not)",
        "oneOf": [
          {
            "description": "Disk is being initialized",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "creating"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready but detached from any Instance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is being detached from the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "detaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk has been destroyed",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is unavailable",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "FieldSchema": {
        "description": "The name and type information for a field of a timeseries schema.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/FieldSource"
          },
          "ty": {
            "$ref": "#/components/schemas/FieldType"
          }
        },
        "required": [
          "name",
          "source",
          "ty"
        ]
      },
      "FieldSource": {
        "description": "The source from which a field is derived, the target or metric.",
        "type": "string",
        "enum": [
          "Target",
          "Metric"
        ]
      },
      "FieldType": {
        "description": "The `FieldType` identifies the data type of a target or metric field.",
        "type": "string",
        "enum": [
          "String",
          "I64",
          "IpAddr",
          "Uuid",
          "Bool"
        ]
      },
      "IdSortMode": {
        "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
        "type": "string",
        "enum": [
          "id-ascending"
        ]
      },
      "Instance": {
        "description": "Client view of an [`Instance`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "hostname": {
            "description": "RFC1035-compliant hostname for the Instance.",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "memory": {
            "description": "memory allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "ncpus": {
            "description": "number of CPUs allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceCpuCount"
              }
            ]
          },
          "project_id": {
            "description": "id for the project containing this Instance",
            "type": "string",
            "format": "uuid"
          },
          "run_state": {
            "$ref": "#/components/schemas/InstanceState"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "time_run_state_updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "hostname",
          "id",
          "memory",
          "name",
          "ncpus",
          "project_id",
          "run_state",
          "time_created",
          "time_modified",
          "time_run_state_updated"
        ]
      },
      "InstanceCpuCount": {
        "description": "The number of CPUs in an Instance",
        "type": "integer",
        "format": "uint16",
        "minimum": 0
      },
      "InstanceCreate": {
        "description": "Create-time parameters for an [`Instance`](omicron_common::api::external::Instance)",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "memory": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "ncpus": {
            "$ref": "#/components/schemas/InstanceCpuCount"
          },
          "network_interfaces": {
            "description": "The network interfaces to be created for this instance.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceNetworkInterfaceAttachment"
              }
            ]
          }
        },
        "required": [
          "description",
          "hostname",
          "memory",
          "name",
          "ncpus"
        ]
      },
      "InstanceMigrate": {
        "description": "Migration parameters for an [`Instance`](omicron_common::api::external::Instance)",
        "type": "object",
        "properties": {
          "dst_sled_uuid": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "dst_sled_uuid"
        ]
      },
      "InstanceNetworkInterfaceAttachment": {
        "description": "Describes an attachment of a `NetworkInterface` to an `Instance`, at the time the instance is created.",
        "oneOf": [
          {
            "description": "Create one or more `NetworkInterface`s for the `Instance`",
            "type": "object",
            "properties": {
              "params": {
                "$ref": "#/components/schemas/InstanceNetworkInterfaceCreate"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Create"
                ]
              }
            },
            "required": [
              "params",
              "type"
            ]
          },
          {
            "description": "Default networking setup, which creates a single interface with an auto-assigned IP address from project's \"default\" VPC and \"default\" VPC Subnet.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Default"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "No network interfaces at all will be created for the instance.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "None"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "InstanceNetworkInterfaceCreate": {
        "type": "object",
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkInterfaceCreate"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "InstanceResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instance"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "InstanceState": {
        "description": "Running state of an Instance (primarily: booted or stopped)\n\nThis typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle",
        "type": "string",
        "enum": [
          "creating",
          "starting",
          "running",
          "stopping",
          "stopped",
          "rebooting",
          "migrating",
          "repairing",
          "failed",
          "destroyed"
        ]
      },
      "IpNet": {
        "description": "An `IpNet` represents an IP network, either IPv4 or IPv6.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "V4": {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            },
            "required": [
              "V4"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "V6": {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            },
            "required": [
              "V6"
            ],
            "additionalProperties": false
          }
        ]
      },
      "Ipv4Net": {
        "title": "An IPv4 subnet",
        "description": "An IPv4 subnet, including prefix and subnet mask",
        "type": "string",
        "pattern": "(^(10\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9]\\.){2}(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])/(1[0-9]|2[0-8]|[8-9]))$)|(^(172\\.16\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])/(1[2-9]|2[0-8]))$)|(^(192\\.168\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])/(1[6-9]|2[0-8]))$)",
        "maxLength": 18
      },
      "Ipv6Net": {
        "title": "An IPv6 subnet",
        "description": "An IPv6 subnet, including prefix and subnet mask",
        "type": "string",
        "pattern": "^(fd|FD)[0-9a-fA-F]{2}:((([0-9a-fA-F]{1,4}\\:){6}[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,6}:))/(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])$",
        "maxLength": 43
      },
      "L4PortRange": {
        "title": "A range of IP ports",
        "description": "An inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port",
        "type": "string",
        "pattern": "^[0-9]{1,5}(-[0-9]{1,5})?$",
        "minLength": 1,
        "maxLength": 11
      },
      "LoginParams": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "MacAddr": {
        "title": "A MAC address",
        "description": "A Media Access Control address, in EUI-48 format",
        "type": "string",
        "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
        "minLength": 17,
        "maxLength": 17
      },
      "Name": {
        "title": "A name used in the API",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.",
        "type": "string",
        "pattern": "[a-z](|[a-zA-Z0-9-]*[a-zA-Z0-9])",
        "maxLength": 63
      },
      "NameOrIdSortMode": {
        "description": "Supported set of sort modes for scanning by name or id",
        "type": "string",
        "enum": [
          "name-ascending",
          "name-descending",
          "id-ascending"
        ]
      },
      "NameSortMode": {
        "description": "Supported set of sort modes for scanning by name only\n\nCurrently, we only support scanning in ascending order.",
        "type": "string",
        "enum": [
          "name-ascending"
        ]
      },
      "NetworkInterface": {
        "description": "A `NetworkInterface` represents a virtual network interface device.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "instance_id": {
            "description": "The Instance to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "description": "The IP address assigned to this interface.",
            "type": "string",
            "format": "ip"
          },
          "mac": {
            "description": "The MAC address assigned to this interface.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MacAddr"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "subnet_id": {
            "description": "The subnet to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "instance_id",
          "ip",
          "mac",
          "name",
          "subnet_id",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "NetworkInterfaceCreate": {
        "description": "Create-time parameters for a [`NetworkInterface`](omicron_common::api::external::NetworkInterface)",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "ip": {
            "nullable": true,
            "description": "The IP address for the interface. One will be auto-assigned if not provided.",
            "type": "string",
            "format": "ip"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "subnet_name": {
            "description": "The VPC Subnet in which to create the interface.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "vpc_name": {
            "description": "The VPC in which to create the interface.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        },
        "required": [
          "description",
          "name",
          "subnet_name",
          "vpc_name"
        ]
      },
      "NetworkInterfaceResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkInterface"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Organization": {
        "description": "Client view of an [`Organization`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "OrganizationCreate": {
        "description": "Create-time parameters for an [`Organization`](crate::external_api::views::Organization)",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "OrganizationResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "OrganizationUpdate": {
        "description": "Updateable properties of an [`Organization`](crate::external_api::views::Organization)",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "Project": {
        "description": "Client view of a [`Project`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "organization_id",
          "time_created",
          "time_modified"
        ]
      },
      "ProjectCreate": {
        "description": "Create-time parameters for a [`Project`](crate::external_api::views::Project)",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "ProjectResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ProjectUpdate": {
        "description": "Updateable properties of a [`Project`](crate::external_api::views::Project)",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "Rack": {
        "description": "Client view of an [`Rack`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "RackResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rack"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Role": {
        "description": "Client view of a [`Role`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/RoleName"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "RoleName": {
        "title": "A name for a built-in role",
        "description": "Role names consist of two string components separated by dot (\".\").",
        "type": "string",
        "pattern": "[a-z-]+\\.[a-z-]+",
        "maxLength": 63
      },
      "RoleResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "RouteDestination": {
        "description": "A `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.\n\nWhen traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule.",
        "oneOf": [
          {
            "description": "Route applies to traffic destined for a specific IP address",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Route applies to traffic destined for a specific IP subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip_net"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/IpNet"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Route applies to traffic destined for the given VPC.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Route applies to traffic",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "RouteTarget": {
        "description": "A `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.",
        "oneOf": [
          {
            "description": "Forward traffic to a particular IP address.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Forward traffic to a VPC",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Forward traffic to a VPC Subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Forward traffic to a specific instance",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Forward traffic to an internet gateway",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "internet_gateway"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "RouterRoute": {
        "description": "A route defines a rule that governs where traffic should be sent based on its destination.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/RouteDestination"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "description": "Describes the kind of router. Set at creation. `read-only`",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouterRouteKind"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "router_id": {
            "description": "The VPC Router to which the route belongs.",
            "type": "string",
            "format": "uuid"
          },
          "target": {
            "$ref": "#/components/schemas/RouteTarget"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "destination",
          "id",
          "kind",
          "name",
          "router_id",
          "target",
          "time_created",
          "time_modified"
        ]
      },
      "RouterRouteCreateParams": {
        "description": "Create-time parameters for a [`RouterRoute`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/RouteDestination"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "target": {
            "$ref": "#/components/schemas/RouteTarget"
          }
        },
        "required": [
          "description",
          "destination",
          "name",
          "target"
        ]
      },
      "RouterRouteKind": {
        "description": "The classification of a [`RouterRoute`] as defined by the system. The kind determines certain attributes such as if the route is modifiable and describes how or where the route was created.\n\nSee [RFD-21](https://rfd.shared.oxide.computer/rfd/0021#concept-router) for more context",
        "type": "string",
        "enum": [
          "default",
          "vpc_subnet",
          "vpc_peering",
          "custom"
        ]
      },
      "RouterRouteResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouterRoute"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "RouterRouteUpdateParams": {
        "description": "Updateable properties of a [`RouterRoute`]",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/RouteDestination"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "target": {
            "$ref": "#/components/schemas/RouteTarget"
          }
        },
        "required": [
          "destination",
          "target"
        ]
      },
      "Saga": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/SagaState"
          }
        },
        "required": [
          "id",
          "state"
        ]
      },
      "SagaErrorInfo": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "action_failed"
                ]
              },
              "source_error": {}
            },
            "required": [
              "error",
              "source_error"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "deserialize_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "injected_error"
                ]
              }
            },
            "required": [
              "error"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "serialize_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "subsaga_create_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          }
        ]
      },
      "SagaResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Saga"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SagaState": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "running"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "succeeded"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error_info": {
                "$ref": "#/components/schemas/SagaErrorInfo"
              },
              "error_node_name": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              }
            },
            "required": [
              "error_info",
              "error_node_name",
              "state"
            ]
          }
        ]
      },
      "SessionUser": {
        "description": "Client view of currently authed user.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "id"
        ]
      },
      "Sled": {
        "description": "Client view of an [`Sled`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "service_address": {
            "type": "string"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "service_address",
          "time_created",
          "time_modified"
        ]
      },
      "SledResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sled"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Snapshot": {
        "description": "Client view of a Snapshot",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "disk_id": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "project_id": {
            "type": "string",
            "format": "uuid"
          },
          "size": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "disk_id",
          "id",
          "name",
          "project_id",
          "size",
          "time_created",
          "time_modified"
        ]
      },
      "SnapshotCreate": {
        "description": "Create-time parameters for a [`Snapshot`](omicron_common::api::external::Snapshot)",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "disk": {
            "description": "The name of the disk to be snapshotted",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "disk",
          "name"
        ]
      },
      "SnapshotResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Snapshot"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "TimeseriesName": {
        "title": "The name of a timeseries",
        "description": "Names are constructed by concatenating the target and metric names with ':'. Target and metric names must be lowercase alphanumeric characters with '_' separating words.",
        "type": "string",
        "pattern": "(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*):(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*)"
      },
      "TimeseriesSchema": {
        "description": "The schema for a timeseries.\n\nThis includes the name of the timeseries, as well as the datum type of its metric and the schema for each field.",
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "datum_type": {
            "$ref": "#/components/schemas/DatumType"
          },
          "field_schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldSchema"
            }
          },
          "timeseries_name": {
            "$ref": "#/components/schemas/TimeseriesName"
          }
        },
        "required": [
          "created",
          "datum_type",
          "field_schema",
          "timeseries_name"
        ]
      },
      "TimeseriesSchemaResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeseriesSchema"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "User": {
        "description": "Client view of a [`User`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "UserResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Vpc": {
        "description": "Client view of a [`Vpc`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "dns_name": {
            "description": "The name used for the VPC in DNS.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "ipv6_prefix": {
            "description": "The unique local IPv6 address range for subnets in this VPC",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "project_id": {
            "description": "id for the project containing this VPC",
            "type": "string",
            "format": "uuid"
          },
          "system_router_id": {
            "description": "id for the system router where subnet default routes are registered",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "dns_name",
          "id",
          "ipv6_prefix",
          "name",
          "project_id",
          "system_router_id",
          "time_created",
          "time_modified"
        ]
      },
      "VpcCreate": {
        "description": "Create-time parameters for a [`Vpc`](crate::external_api::views::Vpc)",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "dns_name": {
            "$ref": "#/components/schemas/Name"
          },
          "ipv6_prefix": {
            "nullable": true,
            "description": "The IPv6 prefix for this VPC.\n\nAll IPv6 subnets created from this VPC must be taken from this range, which sould be a Unique Local Address in the range `fd00::/48`. The default VPC Subnet will have the first `/64` range from this prefix.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "dns_name",
          "name"
        ]
      },
      "VpcFirewallRule": {
        "description": "A single rule in a VPC firewall",
        "type": "object",
        "properties": {
          "action": {
            "description": "whether traffic matching the rule should be allowed or dropped",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleAction"
              }
            ]
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "direction": {
            "description": "whether this rule is for incoming or outgoing traffic",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleDirection"
              }
            ]
          },
          "filters": {
            "description": "reductions on the scope of the rule",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleFilter"
              }
            ]
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "priority": {
            "description": "the relative priority of this rule",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "status": {
            "description": "whether this rule is in effect",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleStatus"
              }
            ]
          },
          "targets": {
            "description": "list of sets of instances that the rule applies to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleTarget"
            }
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "the VPC to which this rule belongs",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "action",
          "description",
          "direction",
          "filters",
          "id",
          "name",
          "priority",
          "status",
          "targets",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "VpcFirewallRuleAction": {
        "type": "string",
        "enum": [
          "allow",
          "deny"
        ]
      },
      "VpcFirewallRuleDirection": {
        "type": "string",
        "enum": [
          "inbound",
          "outbound"
        ]
      },
      "VpcFirewallRuleFilter": {
        "description": "Filter for a firewall rule. A given packet must match every field that is present for the rule to apply to it. A packet matches a field if any entry in that field matches the packet.",
        "type": "object",
        "properties": {
          "hosts": {
            "nullable": true,
            "description": "If present, the sources (if incoming) or destinations (if outgoing) this rule applies to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleHostFilter"
            }
          },
          "ports": {
            "nullable": true,
            "description": "If present, the destination ports this rule applies to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/L4PortRange"
            }
          },
          "protocols": {
            "nullable": true,
            "description": "If present, the networking protocols this rule applies to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleProtocol"
            }
          }
        }
      },
      "VpcFirewallRuleHostFilter": {
        "description": "The `VpcFirewallRuleHostFilter` is used to filter traffic on the basis of its source or destination host.",
        "oneOf": [
          {
            "description": "The rule applies to traffic from/to all instances in the VPC",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to traffic from/to all instances in the VPC Subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to traffic from/to this specific instance",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to traffic from/to a specific IP address",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to traffic from/to a specific IP subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip_net"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/IpNet"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "VpcFirewallRuleProtocol": {
        "description": "The protocols that may be specified in a firewall rule's filter",
        "type": "string",
        "enum": [
          "TCP",
          "UDP",
          "ICMP"
        ]
      },
      "VpcFirewallRuleStatus": {
        "type": "string",
        "enum": [
          "disabled",
          "enabled"
        ]
      },
      "VpcFirewallRuleTarget": {
        "description": "A `VpcFirewallRuleTarget` is used to specify the set of [`Instance`]s to which a firewall rule applies.",
        "oneOf": [
          {
            "description": "The rule applies to all instances in the VPC",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to all instances in the VPC Subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to this specific instance",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to a specific IP address",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to a specific IP subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip_net"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/IpNet"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "VpcFirewallRuleUpdate": {
        "description": "A single rule in a VPC firewall",
        "type": "object",
        "properties": {
          "action": {
            "description": "whether traffic matching the rule should be allowed or dropped",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleAction"
              }
            ]
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "direction": {
            "description": "whether this rule is for incoming or outgoing traffic",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleDirection"
              }
            ]
          },
          "filters": {
            "description": "reductions on the scope of the rule",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleFilter"
              }
            ]
          },
          "name": {
            "description": "name of the rule, unique to this VPC",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "priority": {
            "description": "the relative priority of this rule",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "status": {
            "description": "whether this rule is in effect",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleStatus"
              }
            ]
          },
          "targets": {
            "description": "list of sets of instances that the rule applies to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleTarget"
            }
          }
        },
        "required": [
          "action",
          "description",
          "direction",
          "filters",
          "name",
          "priority",
          "status",
          "targets"
        ]
      },
      "VpcFirewallRuleUpdateParams": {
        "description": "Updateable properties of a `Vpc`'s firewall Note that VpcFirewallRules are implicitly created along with a Vpc, so there is no explicit creation.",
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleUpdate"
            }
          }
        },
        "required": [
          "rules"
        ]
      },
      "VpcFirewallRules": {
        "description": "Collection of a [`Vpc`]'s firewall rules",
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRule"
            }
          }
        },
        "required": [
          "rules"
        ]
      },
      "VpcResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vpc"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcRouter": {
        "description": "A VPC router defines a series of rules that indicate where traffic should be sent depending on its destination.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "$ref": "#/components/schemas/VpcRouterKind"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which the router belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "kind",
          "name",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "VpcRouterCreate": {
        "description": "Create-time parameters for a [`VpcRouter`](crate::external_api::views::VpcRouter)",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "VpcRouterKind": {
        "type": "string",
        "enum": [
          "system",
          "custom"
        ]
      },
      "VpcRouterResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcRouter"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcRouterUpdate": {
        "description": "Updateable properties of a [`VpcRouter`](crate::external_api::views::VpcRouter)",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "VpcSubnet": {
        "description": "A VPC subnet represents a logical grouping for instances that allows network traffic between them, within a IPv4 subnetwork or optionall an IPv6 subnetwork.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "ipv4_block": {
            "description": "The IPv4 subnet CIDR block.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          "ipv6_block": {
            "description": "The IPv6 subnet CIDR block.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which the subnet belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "ipv4_block",
          "ipv6_block",
          "name",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "VpcSubnetCreate": {
        "description": "Create-time parameters for a [`VpcSubnet`](crate::external_api::views::VpcSubnet)",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "ipv4_block": {
            "description": "The IPv4 address range for this subnet.\n\nIt must be allocated from an RFC 1918 private address range, and must not overlap with any other existing subnet in the VPC.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          "ipv6_block": {
            "nullable": true,
            "description": "The IPv6 address range for this subnet.\n\nIt must be allocated from the RFC 4193 Unique Local Address range, with the prefix equal to the parent VPC's prefix. A random `/64` block will be assigned if one is not provided. It must not overlap with any existing subnet in the VPC.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "ipv4_block",
          "name"
        ]
      },
      "VpcSubnetResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcSubnet"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcSubnetUpdate": {
        "description": "Updateable properties of a [`VpcSubnet`](crate::external_api::views::VpcSubnet)",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ipv4_block": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          "ipv6_block": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "VpcUpdate": {
        "description": "Updateable properties of a [`Vpc`](crate::external_api::views::Vpc)",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "dns_name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "disks",
      "description": "Virtual disks are used to store instance-local data which includes the operating system.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "firewall",
      "description": "Firewall operation controls the flow of network data into a VPC",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "hidden",
      "description": "TODO operations that will not ship to customers",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "instances",
      "description": "Virtual machine instances are the basic unit of computation. These operations are used for provisioning, controlling, and destroying instances.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "metrics",
      "description": "Metrics provide insight into the operation of the Oxide deployment. These include telemetry on hardware and software components that can be used to understand the current state as well as to diagnose issues.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "organizations",
      "description": "Organizations represent a subset of users and projects in an Oxide deployment.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "projects",
      "description": "Projects are a grouping of associated resources such as instances and disks within an organization for purposes of billing and access control.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "racks",
      "description": "These operations pertain to hardware inventory and management. Racks are the unit of expansion of an Oxide deployment. Racks are in turn composed of sleds, switches, power supplies, and a cabled backplane.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "roles",
      "description": "Roles are a component of Identity and Access Management (IAM) that allow a user or agent account access to additional permissions.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "routers",
      "description": "Routers direct the flow of network traffic into, out of, and within a VPC via routes.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "routes",
      "description": "Routes define router policy.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "sagas",
      "description": "Sagas are the abstraction used to represent multi-step operations within the Oxide deployment. These operations can be used to query saga status and report errors.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "sleds",
      "description": "This tag should be moved into hardware",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "snapshots",
      "description": "Snapshots of Virtual Disks at a particular point in time.",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "subnets",
      "description": "This tag should be moved into a generic network tag",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "updates",
      "description": "This tag should be moved into a operations tag",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "users",
      "description": "This tag should be moved into an IAM tag",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    },
    {
      "name": "vpcs",
      "description": "A Virtual Private Cloud (VPC) is an isolated network environment that should probaby be moved into a more generic networking tag",
      "externalDocs": {
        "url": "http://oxide.computer/docs/#xxx"
      }
    }
  ]
}